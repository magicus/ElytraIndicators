plugins {
    id 'fabric-loom' version "${loom_version}"
    id "com.diffplug.spotless" version "${spotless_version}"
}

repositories {
    maven { url "https://maven.parchmentmc.org/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Configuration
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
def fabric_api_version = project.fabric_version.tokenize('+')[0]

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(java_version))
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

processResources {
    inputs.properties([
        "cloth_version": project.cloth_version,
        "fabric_api_version": fabric_api_version,
        "loader_version": project.loader_version,
        "mod_version": project.mod_version,
        "supported_minecraft_versions": project.minecraft_version,
    ])

    filesMatching("fabric.mod.json") {
        expand([
            cloth_version: project.cloth_version,
            fabric_api_version: fabric_api_version,
            loader_version: project.loader_version,
            mod_version: project.mod_version,
            supported_minecraft_versions: project.minecraft_version,
        ])
    }
}

spotless {
    java {
        // define the steps to apply to Java source code
        importOrder()
        removeUnusedImports()
        palantirJavaFormat(spotless_palantir_version)
        trimTrailingWhitespace()
        endWithNewline()
        // Custom rule from https://github.com/apache/geode
        custom "Refuse wildcard imports", {
            if (it =~ /\nimport .*\*;/) {
                throw new AssertionError("Do not use wildcard imports. 'spotlessApply' cannot resolve this issue.")
            }
        }
        custom "Refuse IntelliJ annotations", {
            if (it =~ /\nimport org\.jetbrains\.annotations\./) {
                throw new AssertionError("Do not use IntelliJ annotations. 'spotlessApply' cannot resolve this issue.")
            }
        }
        custom "No empty line after opening curly brace", {
            it.replaceAll(/\{\n\n/, '{\n')
        }
        licenseHeader("/*\n" +
                " * Copyright Â© Magnus Ihse Bursie \$YEAR.\n" +
                " * This file is released under LGPLv3. See LICENSE for full license details.\n" +
                " */")
                .updateYearWithLatest(true)
    }
    json {
        target "**/*.json"
        // schemaVersion must be at the top or else Fabric will complain
        targetExclude("src/main/resources/fabric.mod.json", 'run/**')
        gson()
                .indentWithSpaces(2)
                .sortByKeys()
                .version(spotless_gson_version)
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target '**/*.gradle'
        greclipse("${spotless_greclipse_version}").configFile("${rootDir}/greclipse.properties")
        trimTrailingWhitespace()
        endWithNewline()
    }
    format "misc", {
        target "*.md", ".gitignore", "*.properties"

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}
